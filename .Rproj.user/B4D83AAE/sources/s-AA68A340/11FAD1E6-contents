---
title: "PLS - AGENCIAS"
author: "Roberto Gil-Saura"
date: "`r Sys.time()`"
output:
  html_document:
    highlight: tango
    number_sections: yes
    df_print: paged
    toc: yes
---

NOTA: Incluye constructo de segundo orden

```{=html}
<style type="text/css">
.main-container 
	{
	max-width: 100%;
	margin-left: 10px;
	margin-right: 10px;
	}
.p 
	{
	font-size: 0.8em
	}
</style>
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, comment=NA, warning=FALSE, message=FALSE)
a.data <- read_delim("~/R/r-projects/00.publicaciones/data.art2.vallejo/datos.art2.agencias.csv","\t", escape_double = FALSE, locale = locale(decimal_mark = ",", grouping_mark = ""), trim_ws = TRUE)
options(width=9999)
```

# Tablas muestra

```{r}
# -----------------------------------------
suppressMessages(agencias <- read_spss("~/R/r-projects/00.publicaciones/data.art2.vallejo/agencias_dc.sav"))
wb = createWorkbook()
sh = addWorksheet(wb, "Tablas")
tab1 <- agencias %>%
	tab_cells(mrset(P1_1,P1_2), mrset(P2_1,P2_2,P2_3,P2_4),mrset(P3_1, P3_2)) %>% 
	tab_stat_cases(label='casos') %>%
	tab_stat_cpct(label='% casos') %>% 
	tab_pivot(stat_position='inside_columns')
as.datatable_widget(tab1)
xl_write(tab1, wb, sh)
tab2 <- agencias %>%
	tab_cols(total()) %>% 
	tab_cells(P5) %>%
	tab_stat_fun(Mean = w_mean, "Sd" = w_sd) %>% 
	tab_weight(1) %>% 
	tab_cells(P6*10) %>%
	tab_stat_fun(Mean = w_mean, "Sd" = w_sd) %>% 
	tab_pivot()
as.datatable_widget(tab2)
xl_write(tab2, wb, sh, col=6)
saveWorkbook(wb, "~/R/r-projects/00.publicaciones/data.art2.vallejo/agencias-art2-vallejo-tablas.xlsx", overwrite = TRUE)
```

# Modelización

```{r include=FALSE, warning=FALSE, message=FALSE}
a.df <- a.data[,1:19]
#======================================
# Create mesaurment model
#======================================
a.simple_mm <- constructs(
	composite("VCC", multi_items("VCC", c(1:6))),
	composite("TRUST", multi_items("TRUST", 1:3)),
	composite("COMMIT", multi_items("COMMIT", 1:4)),
	composite("SOCSAT", multi_items("SOCSAT",1:3)),
	higher_composite("RQ", dimensions = c("TRUST","COMMIT", "SOCSAT"), method = two_stage, weights=mode_A),
	composite("ECOSAT", multi_items("ECOSAT", 1:3)))
#======================================
# Create structural model
#======================================
a.simple_sm <- relationships(
	paths(from = c("VCC"), to = c("RQ")),
	paths(from = c("RQ"), to = c("ECOSAT")))
# Estimate the model
simple_model <- estimate_pls(data = a.df,
							 measurement_model = a.simple_mm,
							 structural_model  = a.simple_sm,
							 inner_weights = path_weighting,
							 missing = mean_replacement,
							 missing_value = NA)
```

El modelo de medida es el siguiente:

```{r fig.cap='Modelo de medida', fig.width=8, fig.height=4.5}
plot(a.simple_mm)
```

El modelo estructural es el siguiente:

```{r fig.cap='Modelo estructural', fig.width=8, fig.height=4.5}
# Dibujamos el modelo estructural
plot(a.simple_sm)
```

## Análisis de la fiabilidad

Para el modelo de medida se han considerado composites, mode A (reflectivos???). De este modo, el primer paso debe ser observar el resumen de los indicadores de fiabilidad, consistencia interna y validez.

El resultado del análisis muestra todas las escalas que apoyan las variables latentes tienen un *Cronbach's alpha* mayor que 0.7, completado por una fiabilidad del compuesto *rhoC* también por encima de 0.7. para valores superiores a 0.9[^1].

[^1]: En <https://forum.smartpls.com/viewtopic.php?f=5&t=3805> hay una "discusión en torno al "greater than 0.9" de Primer PLS ... de Hair; lo solventa un investigador / desarrollador de SmartPLS: <https://www.researchgate.net/profile/Jan_Michael_Becker>

```{r fig.cap='Tabla Resumen', fig.width=16, fig.height=9}
# Summarize the model results
summary_simple <- summary(simple_model)
summary_simple$reliability
```

## Validez convergente

### AVE

Del mismo modo, para evaluar la *validez convergente* o grado con el que una medida correlaciona positivamente con medidas alternativas del mismo
constructo, usamos el coeficiente *AVE (average variance extracted)* que también cumple con la expectativa de estar por encima de 0.5.

```{r}
summary_simple$reliability
```

Los indicadores son mostrados de forma conjunta en el siguiente gráfico.

```{r fig.cap='Tabla de fiabilidad', fig.width=16, fig.height=9}
plot(summary_simple$reliability)
```

### Análisis de las cargas

Por otro lado, es importante analizar también las cargas o *loadings*, indicadores de la fiabilidad del indicador en el constructo, y que deberían ser
mayores de 0.7 para retener el indicador; para aquellas que están entre 0.4 y 0.7 debe ser analizado el comportamiento del constructo ante una
eliminación del indicador con carga baja[^2].

[^2]: En nuestro caso al proceder con la eliminación de aquellas cargas menores de 0.7 no mejoraba significativamente el modelo

```{r}
summary_simple$loadings
#as.data.frame(rowSums(round(summary_simple$loadings,3)))
```

## Validez discriminante

### Cross-loadings

Para el análisis de la validez discriminante o capacidad de un constructo de ser realmente distinto a otros, utilizamos las denominadas
*cross-loadings*, que miden esa capacidad del constructo. En la tabla adjunta se puede observar en cada indicador carga de forma superior en su
variable latente, siendo el resto de cargas de menor intensidad.

```{r}
summary_simple$validity$cross_loadings
```

### Fornell-Larcker

El criterio de *Fornell-Larcker*, compara la raíz cuadrado del *AVE* con la correlación de las variables latentes. La raíz cuadrada del AVE de cada
constructo, debería ser más grande que la más alta correlación con cualquier otro constructo. Se puede observar en la tabla siguiente que el valor en
la diagonal principal, es mayor que el resto de valores en la parte inferior de la matriz.

```{r}
summary_simple$validity$fl_criteria
```

### HTMT

Por último el *HTMT* es un ratio que si es mayor que 0.90 indica una pérdida de validez discriminante.

```{r}
summary_simple$validity$htmt
```

## Análisis del modelo estructural

Una vez analizados los constructos desde el punto de vista de su composición, debemos analizar el modelo estructural en su conjunto. Partiendo de que
el objetivo del PLS es la maximización de la varianza explicada, las medidas más importantes son la fiabilidad, la validez convergente y la validez
discriminante del conjunto del modelo.

-   R<sup>2</sup>, coeficiente de determinación y/o % de varianza explicada
-   f<sup>2</sup> y q<sup>2</sup> efecto tamaño
-   Q<sup>2</sup>, relevancia predictiva

### Paths

```{r}
summary_simple$paths
```

### R<sup>2</sup>

Buscar *R*<sup>2</sup> mayores de 0.7, aunque valores alrededor de 0.25 sean aceptados según ámbitos; (sustancial mayor que 0.75, moderado alrededor
de 0.5 y débil, 0.25). Usar R<sup>2</sup><sub>adj</sub> para comparar modelos con diferente número de constructos y/u observaciones.

```{r}
simple_model$rSquared
```

### f<sup>2</sup> - effect sizes

El *f*<sup>2</sup> permite evaluar la contribución de cada constructo exógeno a la R<sup>2</sup> de un constructo endógeno. Los valores de 0.02, 0.15
y 0.35 indican un efecto pequeño, mediano o grande sobre el constructo endógeno.

```{r}
summary_simple$fSquare
```

### Efectos

#### Totales

```{r}
summary_simple$total_effects
```

#### Indirectos

```{r}
summary_simple$total_indirect_effects
```



# Modelización con bootstrapping

*Bootstrapping* para calcular la significatividad de los paths estimados. Habitualmente se trabaja con un 5% (t \> 1.96) lo que implica
significatividad al 95%. Podemos cambiar al 10 o al 1 según ámbito. Usar doble bootstrapping si hay menos de 4 constructos.

```{r}
# Bootstrap the model
boot_model <- bootstrap_model(seminr_model = simple_model,nboot = 1000,seed = 123)
summary_boot <- summary(boot_model)
```

## Structural paths

```{r}
summary_boot$bootstrapped_paths
```

## Bootstrapped loadings

```{r}
summary_boot$bootstrapped_loadings
```

## Bootstrapped HTMT

```{r}
summary_boot$bootstrapped_HTMT
```

## Total effects (paths)

```{r}
summary_boot$bootstrapped_total_paths
```

## Plot model

```{r fig.cap='Modelo con bootstrapping', fig.width=8, fig.height=4.5}
plot(boot_model, theme=seminr_theme_smart())
```

# Predicción

```{r}
#planteamos el modelo sin el hco
xdf <- simple_model$data[,1:22]

#======================================
# Create measurment model
#======================================
xsimple_mm <- constructs(
	composite("VCC", multi_items("VCC", c(1:6))),
	composite("RQ", c("TRUST","COMMIT", "SOCSAT")),
	composite("ECOSAT", multi_items("ECOSAT", 1:3)))
#======================================
# Create structural model
#======================================
xsimple_sm <- relationships(
	paths(from = c("VCC"), to = c("RQ")),
	paths(from = c("RQ"), to = c("ECOSAT")))
# Estimate the model
xsimple_model <- estimate_pls(data = xdf,
							 measurement_model = xsimple_mm,
							 structural_model  = xsimple_sm,
							 inner_weights = path_weighting,
							 missing = mean_replacement,
							 missing_value = NA)
xpredict_simple_model <- predict_pls(model = xsimple_model,technique = predict_DA, noFolds = 10,reps = 10)
xsum_predict_simple_model <- summary(xpredict_simple_model)
xsum_predict_simple_model
```

# Potencia (pwr)

En nuestro ejemplo tenemos una muestra 256 empresas, y la regresión más complicada es la del constructo con 3 regresores por lo que v=256-3-1=252.

```{r}

#======================================
# Potencia de las regresiones
#======================================

# N= (tamaño muestral) 
# u = número de variables independientes de la mayor regresión
# v = N -u -1
# f2 = 0.15 (efecto medio)
# sig.level es el nivel de significación, normalmente 0.05

pwr.f2.test(u =3, v = 252 , f2 =0.15 , sig.level = 0.05, power = NULL)

#Si quisiéramos saber la muestra necesaria para alcanzar una potencia del 80%

pwr.f2.test(u =3, v = NULL , f2 =0.15 , sig.level = 0.05, power = 0.80)
```

El resultado indica que nuestro tamaño muestra posee una potencia igual al valor del resultado de *power*, ya que el tamaño muestral máximo para una potencia del 80% sería del valor del resultado del valor de *v* elementos con los parámetros indicados.
